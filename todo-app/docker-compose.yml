services:
  app:
    image: todo-frontend
    build:
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
    ports:
      - 5000:3000
    container_name: todo-front # This will name the container todo-front-dev
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api/

  mongo:
    image: mongo
    ports:
     - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db

  redis:
    image: redis
    ports:
    - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data   

  server:                    # The name of the service, can be anything
    image: todo-backend   # Declares which image to use
    build:
      context: ./todo-backend # The context will pick this directory as the "build context"
      dockerfile: Dockerfile # This will simply tell which dockerfile to read
    ports:                # Declares the ports to publish
      - 3000:3000    
    container_name: todo-back # This will name the container todo-front-dev  
    environment: 
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database   
         
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app # wait for the frontend container to be started
      - server    